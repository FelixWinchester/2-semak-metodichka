#include <iostream>
#include <fstream>
using namespace std;

class Node { //Node –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ (–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä)
public:
    int data; //–°–æ–±—Å—Ç–Ω–∞ –¥–∞–Ω–Ω—ã–µ (–õ–æ–≥–∏—á–Ω–æ)
    Node* next; // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª

    Node(int data) {
        this->data = data;
        this->next = NULL;
    }
};

class Listik {
public:
    Node* head;

    Listik() {
        this->head = NULL;
    }

    void insert(int data) { // –ü–∏–Ω–∞–µ–º —É–∑–µ–ª –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ 
        Node* newNode = new Node(data);
        if (this->head == NULL) {
            this->head = newNode;
        }
        else {
            Node* current = this->head;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void print() { // –í—ã–≤–æ–¥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω
        Node* current = this->head;
        while (current != NULL) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }

    void replace() { // –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏ (–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –æ–¥–∏–Ω)
        Node* current = this->head;
        while (current != NULL) {
            int data = current->data;
            Node* next = current->next;
            while (next != NULL && next->data == data) {
                next = next->next;
            }
            current->next = next;
            current = next;
        }
    }
};

int main() {
    Listik list; // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    ifstream in("input.txt");
    int data;
    while (in >> data) {
        list.insert(data); // –ó–∞–ø–∏—Ö–∏–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
    }
    in.close(); list.replace();
    ofstream out("output.txt");
    Node* current = list.head; 
    while (current != NULL) { // –ó–∞–ø–∏—Ö–∏–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        out << current->data << " ";
        current = current->next;
    }
    out.close();
    return 0;
}

// 2 —á–∞—Å–∞ –Ω–∞ —ç—Ç–æ... –ê –¥–∞–ª—å—à–µ —á—Ç–æ –±—É–¥–µ—Ç...
// –ú–ï–°–Ø–¶ –û–°–¢–ê–õ–°–Ø?!?! üòµ‚Äçüí´üòµ
